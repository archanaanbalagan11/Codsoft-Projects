import math

# Constants
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Initialize board
board = [EMPTY for _ in range(9)]

def print_board(b):
    print()
    for i in range(3):
        row = b[i*3:(i+1)*3]
        print(' | '.join(row))
        if i < 2:
            print('--+---+--')
    print()

def check_winner(b):
    # Winning combos
    wins = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # cols
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    for combo in wins:
        if b[combo[0]] == b[combo[1]] == b[combo[2]] != EMPTY:
            return b[combo[0]]
    if EMPTY not in b:
        return 'D'  # Draw
    return None  # Game ongoing

def minimax(b, depth, is_maximizing):
    result = check_winner(b)
    if result == AI:
        return 1
    elif result == HUMAN:
        return -1
    elif result == 'D':
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if b[i] == EMPTY:
                b[i] = AI
                score = minimax(b, depth + 1, False)
                b[i] = EMPTY
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if b[i] == EMPTY:
                b[i] = HUMAN
                score = minimax(b, depth + 1, True)
                b[i] = EMPTY
                best_score = min(best_score, score)
        return best_score

def best_move():
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] == EMPTY:
            board[i] = AI
            score = minimax(board, 0, False)
            board[i] = EMPTY
            if score > best_score:
                best_score = score
                move = i
    return move

def human_move():
    while True:
        try:
            pos = int(input("Enter your move (1-9): ")) - 1
            if board[pos] == EMPTY:
                board[pos] = HUMAN
                break
            else:
                print("Position already taken! Try again.")
        except (ValueError, IndexError):
            print("Invalid move! Choose a number from 1 to 9.")

def main():
    print("Welcome to Tic-Tac-Toe! You're 'X' and AI is 'O'.")
    print_board(board)
    while True:
        human_move()
        print_board(board)
        result = check_winner(board)
        if result:
            break

        print("AI's turn...")
        move = best_move()
        board[move] = AI
        print_board(board)

        result = check_winner(board)
        if result:
            break

    if result == 'D':
        print("It's a draw!")
    else:
        print(f"{result} wins the game!")

if __name__ == '__main__':
    main()
